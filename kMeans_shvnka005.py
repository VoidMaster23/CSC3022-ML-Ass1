# -*- coding: utf-8 -*-
"""kMeans_shvnka005.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ssFQ913828mqVCal0X1x5iwgrKFWepLb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from random import randint

count = 0

def nearestCent(d0,d1,d2):

  minimum = min(d0,d1,d2)

  if d0 == minimum:
    return 0
  elif d1 == minimum:
    return 1
  elif d2 == minimum:
    return 2

#defining the data
x = [2, 2, 8, 5, 7, 6, 1, 4]
y = [10, 5, 4, 8, 5, 4, 2, 9]

dataDict = {
    "X": x, "Y": y
}

data = pd.DataFrame(dataDict)

#display data
print( "Input Data" )
print(data)

#randomly find initial centroid values
#centroids = [1, 4, 7]
centroids = [randint(0,7), randint(0,7), randint(0,7)]
xCentroids = [-1, -1, -1]
yCentroids = [-1, -1, -1]
for i in range (3):
  #data[f'C{i}'] = centroids[i]
  data[f'C{i}x'] = x[centroids[i]]
  data[f'C{i}y'] = y[centroids[i]]
  data[f"D{i}"] = -1.0
data['nearest'] = None
data['meanX'] = -1
data['meanY'] = -1 

#initial clusters
for i in range(8):
  #calculate distances 
  dist0 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[0]], y[centroids[0]]]))
  dist1 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[1]], y[centroids[1]]]))
  dist2 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[2]], y[centroids[2]]]))

  near = nearestCent(dist0, dist1, dist2);

  data.at[i,"D0"] = dist0
  data.at[i,"D1"] = dist1
  data.at[i,"D2"] = dist2

  # print(dist0)
  # print(dist1)
  # print(dist2)

  data.at[i,"nearest"] = nearestCent(dist0, dist1, dist2)

 

# move nearest to the end
data = data[[record for record in data if record not in ['nearest']] 
       + ['nearest']]

data

dat = pd.DataFrame()

# group and recombine 
byNearest = data.groupby("nearest")
for state, frame in byNearest:
  meanX = frame['X'].mean()
  meanY = frame['Y'].mean()

  frame['meanX'] = meanX
  frame['meanY'] = meanY
  
  xCentroids[state] = meanX
  yCentroids[state] = meanY
  dat = dat.append(frame)

data = dat.sort_index() #makes sure that the index is kept for the nearest comparison
data

#updating c values
for i in range (3):
  #data[f'C{i}'] = centroids[i]
  data[f'C{i}x'] = xCentroids[i]
  data[f'C{i}y'] = yCentroids[i]
data

oldNearest = np.zeros(8)


count = 0
while not ( oldNearest == data['nearest']).all():
  print("ITERATION", count, end="\n\n")

  print("___________PREVIOUS NEAREST CLUSTERS_________________")
  print(oldNearest)
  oldNearest = data['nearest'].copy()
  print("\n")
  print("___________NEAREST CLUSTERS_________________")
  print(oldNearest)
  for i in range (8):
    record = data.iloc[[i]]
    Coord = np.array([record["X"].values[0], record["Y"].values[0]])


    C0 = np.array([xCentroids[0],yCentroids[0]])
    dist0 = np.linalg.norm(np.array(Coord)-np.array(C0))

    C1 = np.array([xCentroids[1],yCentroids[1]])
    dist1 = np.linalg.norm(np.array(Coord)-np.array(C1))

    C2 = np.array([xCentroids[2],yCentroids[2]])
    dist2 = np.linalg.norm(np.array(Coord)-np.array(C2))

    data.at[i,"D0"] = dist0
    data.at[i,"D1"] = dist1
    data.at[i,"D2"] = dist2

    data.at[i,"nearest"] = nearestCent(dist0, dist1, dist2)

  dat = pd.DataFrame()
  # group and recombine 
  byNearest = data.groupby("nearest")
  for state, frame in byNearest:
    print(f"CLUSTER  {state!r}:\n")
    print("Centroid:", [xCentroids[state], yCentroids[state]], end="\n\n")
    print("Data: ")
    print("------------------------")
    meanX = frame['X'].mean()
    meanY = frame['Y'].mean()

    frame['meanX'] = meanX
    frame['meanY'] = meanY
    
    xCentroids[state] = meanX
    yCentroids[state] = meanY
    dat = dat.append(frame)
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also
      print(frame, "\n\n")

  data = dat.sort_index() #makes sure that the index is kept for the nearest comparison
  count += 1
  for i in range (3):
  #data[f'C{i}'] = centroids[i]
    data[f'C{i}x'] = xCentroids[i]
    data[f'C{i}y'] = yCentroids[i]

print(count)

