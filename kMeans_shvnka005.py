# -*- coding: utf-8 -*-
"""kMeans_shvnka005.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ssFQ913828mqVCal0X1x5iwgrKFWepLb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

def getCoords(data, record):
    print(record)
    ind0x =record["C0x"].values[0]
    ind0y =record["C0y"].values[0]
    print("ind0x", ind0x, "ind0y", ind0y)
    ind1 = record["C1x"].values[0]
    ind2= record["C2x"].values[0]

    # c0 = data.iloc[[ind0]]
    # C0 = [c0["X"].values[0], c0["Y"].values[0]]

    # c1 = data.iloc[[ind1]]
    # C1 = [c1["X"].values[0], c1["Y"].values[0]]

    # c2 = data.iloc[[ind2]]
    # C2 = [c2["X"].values[0], c2["Y"].values[0]]

    coords = [record["X"].values[0], record["Y"].values[0]]
    print(coords)
  

    # return coords, C0, C1, C2

def nearestCent(d0,d1,d2):

  minimum = min(d0,d1,d2)

  if d0 == minimum:
    return 0
  elif d1 == minimum:
    return 1
  elif d2 == minimum:
    return 2

#defining the data
x = [2, 2, 8, 5, 7, 6, 1, 4]
y = [10, 5, 4, 8, 5, 4, 2, 9]

dataDict = {
    "X": x, "Y": y
}

data = pd.DataFrame(dataDict)

#display data
print("Input Data")
print(data)

#randomly find initial centroid values
centroids = [1, 4, 7]
xCentroids = [-1, -1, -1]
yCentroids = [-1, -1, -1]
for i in range (3):
  #data[f'C{i}'] = centroids[i]
  data[f'C{i}x'] = x[centroids[i]]
  data[f'C{i}y'] = y[centroids[i]]
  data[f"D{i}"] = -1.0
data['nearest'] = None
data['meanX'] = -1
data['meanY'] = -1 

#initial clusters
for i in range(8):
  #calculate distances 
  dist0 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[0]], y[centroids[0]]]))
  dist1 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[1]], y[centroids[1]]]))
  dist2 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[2]], y[centroids[2]]]))

  near = nearestCent(dist0, dist1, dist2);

  data.at[i,"D0"] = dist0
  data.at[i,"D1"] = dist1
  data.at[i,"D2"] = dist2

  # print(dist0)
  # print(dist1)
  # print(dist2)

  data.at[i,"nearest"] = nearestCent(dist0, dist1, dist2)

 

# move nearest to the end
data = data[[record for record in data if record not in ['nearest']] 
       + ['nearest']]

data

dat = pd.DataFrame()

# group and recombine 
byNearest = data.groupby("nearest")
for state, frame in byNearest:
  meanX = frame['X'].mean()
  meanY = frame['Y'].mean()

  frame['meanX'] = meanX
  frame['meanY'] = meanY
  
  xCentroids[state] = meanX
  yCentroids[state] = meanY
  dat = dat.append(frame)

data = dat.sort_index() #makes sure that the index is kept for the nearest comparison
data

oldNearest = np.zeros(8)

if (oldNearest == data['nearest']).all():
  print("HMMM")

while not ( oldNearest == data['nearest']).all():
  print(oldNearest)
  oldNearest = data['nearest']
  print(oldNearest)

  
# while(not np.array_equal(data['nearest'].to_numpy(), oldNearest)):
  
#   #check distances to centroids 
#   for i in range len(centroids):

for i in range (8):
  record = data.iloc[[i]]
  # rCoord, C0x, C0y, C1x, C1y, C2x, C2y = getCoords(data, record)
  print("xCentroid", xCentroids[0], "yCentroid", yCentroids[0])
  print("X:", record["X"].values[0], "Y", record["Y"].values[0])

#   # print(rCoord)
#   # print(C0)
#   # print(C1)
#   # print(C2)

#   dist0 = np.linalg.norm(np.array(rCoord)-np.array(C0))
#   dist1 = np.linalg.norm(np.array(rCoord)-np.array(C1))
#   dist2 = np.linalg.norm(np.array(rCoord)-np.array(C2))

#   data.at[i,"D0"] = dist0
#   data.at[i,"D1"] = dist1
#   data.at[i,"D2"] = dist2

#   # print(dist0)
#   # print(dist1)
#   # print(dist2)

#   data.at[i,"nearest"] = nearestCent(dist0, dist1, dist2)


  

# # data 
  

  
  

#   data.at[i,"C0"] =  np.linalg.norm()
#   data.at[i,"C1"] = math.dist([record['X']] , [centroids[1]]) + math.dist([record['Y'] , centroids[1]]) 
#   data.at[i,"C2"] = math.dist([record['X']] , [centroids[2]]) + math.dist([record['Y'] , centroids[2]]) 
# data
#oldNearest = data["nearest"].to_numpy()
#data["nearest"] = min(data[])

# #initial clusters
# for i in range(8):
#   #calculate distances 
#   dist0 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[0]], y[centroids[0]]]))
#   dist1 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[1]], y[centroids[1]]]))
#   dist2 = np.linalg.norm(np.array([x[i], y[i]])-np.array([x[centroids[2]], y[centroids[2]]]))

#   near = nearestCent(dist0, dist1, dist2);

#   data.at[i,"D0"] = dist0
#   data.at[i,"D1"] = dist1
#   data.at[i,"D2"] = dist2

#   # print(dist0)
#   # print(dist1)
#   # print(dist2)

#   data.at[i,"nearest"] = nearestCent(dist0, dist1, dist2)

